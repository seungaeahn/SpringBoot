package com.kh.springdb.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.kh.springdb.service.ProductService;
import com.kh.springdb.vo.Product;

@Controller
//@RestController
@RequestMapping("/products")
public class ProductController {
	private final ProductService productService;
	
	@Autowired
	public ProductController(ProductService productService) {
		this.productService = productService;
	}
	
	@GetMapping
	public String getAllProducts(Model model) {
		List<Product> products = productService.getAllProducts();
		model.addAttribute("products", products);
		//return productService.getAllProducts();
		//return "products";
		return "product_list";
	}
	@GetMapping("/detail/{id}")
	public String getProductById(@PathVariable Long id, Model model) {
		Optional<Product> product = productService.getProductById(id);
		product.ifPresent(value -> model.addAttribute("product", value));
		return "product_detail";
	}
	
	//작성한 내용을 저장하기 위한 메서드
	//save @GetMapping 
	public String displayProductForm(Model model) {
		model.addAttribute("product", new Product());
		return "product_form";
	}
	//save @PostMapping 작성한 내용을 저장할 url 
	@PostMapping("/save")
	public String saveProduct(@ModelAttribute Product product) {
		productService.saveProduct(product);
		return "redirect:/products";
	}
	//delete @GetMapping
	@GetMapping("delete/{id}")
	public String deleteProduct(@PathVariable Long id) {
		productService.deleteProductById(id);
		return "redirect:/products";
	}
	@GetMapping("/details/{id}")
	public String details
	
	@GetMapping("/update/{id}")
	public String updateProduct(@PathVariable Long id, Model model) {
		Optional<Product> product = productService.getProductById(id);
		product.ifPresent(value -> model.addAttribute("product", value));
		return "product_form";
	}
	
	
	
/**
	Optional<Product> product = productService.getProductById(id);
	Optional 안에는 productService.getProductById(id);로 id값을 가져와서 id에 해당하는 제품을 가지고 옴 
	그런데 여기서 만약 id에 해당하는 제품이 존재하지 않는다면 Optional은 비어있게 됨 
	만약에 OPtional이 비어있게 된다면 에러가 발생할 수 있지만  (현재는)
	추후 비어있을 경우를 대비해서 예외값을 처리해주는 것이 좋음 
	product.ifPresent(value -> model.addAttribute("product", value));
		
	}
 */
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
